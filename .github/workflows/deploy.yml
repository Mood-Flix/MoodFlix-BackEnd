# 워크플로우 이름
name: MoodFlix Backend CI/CD

# 언제 실행할 것인가? -> "main" 브랜치에 push 이벤트가 발생했을 때!
on:
  push:
    branches: [ "main" ]

# 어떤 작업을 수행할 것인가?
jobs:
  build-and-deploy:
    # 이 작업은 최신 우분투 환경에서 실행
    runs-on: ubuntu-latest
    # GitHub Secrets에 등록한 production 환경 변수들을 사용
    environment: production

    # 실제 수행할 단계별 명령어들
    steps:
      # 1. GitHub 리포지토리의 소스 코드를 작업 공간으로 가져오기
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Java 17 환경 설정하기 (Gradle 빌드를 위해)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle을 사용하여 프로젝트를 빌드하기 (테스트는 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 4. 2단계에서 등록한 GitHub Secrets를 사용하여 AWS에 로그인하기
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 5. AWS의 ECR(Docker 이미지 저장소)에 로그인하기
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6. Docker 이미지를 빌드하고, 태그를 붙인 후, ECR로 푸시(업로드)하기
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG

      # 7. EC2에 접속하여 새 Docker 이미지로 배포
      - name: Deploy to EC2 with Docker
        uses: appleboy/ssh-action@master
        with:
          host: 54.180.153.141
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1. AWS CLI를 사용하여 ECR에 로그인
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # 2. ECR에서 최신 이미지 가져오기
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}
            
            # 3. 기존에 실행 중인 컨테이너가 있으면 중지 및 제거 (없어도 오류 발생 안 함)
            docker stop moodflix-container || true
            docker rm moodflix-container || true
            
            # 4. 새 이미지로 컨테이너 실행
            docker run -d -p 80:8080 --name moodflix-container \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
              -e TMDB_API_KEY=${{ secrets.TMDB_API_KEY }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}