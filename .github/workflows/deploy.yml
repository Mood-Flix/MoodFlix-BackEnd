# 워크플로우 이름
name: MoodFlix Backend CI/CD

# 언제 실행할 것인가? -> "main" 브랜치에 push 이벤트가 발생했을 때!
on:
  push:
    branches: [ "fix/kakao-auth" ]

# 어떤 작업을 수행할 것인가?
jobs:
  build-and-deploy:
    # 이 작업은 최신 우분투 환경에서 실행
    runs-on: ubuntu-latest
    # GitHub Secrets에 등록한 production 환경 변수들을 사용
    environment: production
    # 동시 배포 방지 및 타임아웃 설정
    concurrency:
      group: deploy-production # 그룹 이름을 'deploy-production'으로 지정
      cancel-in-progress: true   # 진행 중인 동일 그룹의 워크플로우를 취소
    timeout-minutes: 30          # 30분 이상 실행되면 자동 실패 처리

    # 실제 수행할 단계별 명령어들
    steps:
      # 1. GitHub 리포토리의 소스 코드를 작업 공간으로 가져오기
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Java 21 환경 설정하기 (Gradle 빌드를 위해)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. Gradle 빌드 권한 부여 및 실행
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle 테스트 실행
      - name: Run tests with Gradle
        run: ./gradlew test

      # 5. Gradle 빌드 실행 (테스트 통과 후 빌드)
      - name: Build with Gradle
        run: ./gradlew build

      # 6. AWS 자격 증명 설정 및 AWS에 로그인하기
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. AWS의 ECR(Docker 이미지 저장소)에 로그인하기
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 7. Docker 이미지를 빌드하고, 태그를 붙인 후, ECR로 푸시(업로드)하기
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG

        # 핑거프린트 사전 검증 스텝 — 배포 직전
      - name: Verify host fingerprint
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}                # 예: 54.180.153.141 또는 도메인
          EXPECT:   ${{ secrets.EC2_HOST_FINGERPRINT }}    # 예: SHA256:J1UBC...
        run: |
          set -euo pipefail
          PORT="${SSH_PORT:-22}"
          echo "Checking $SSH_HOST:$PORT ..."
          ACTUAL="$(ssh-keyscan -T 5 -p "$PORT" -t ed25519 "$SSH_HOST" 2>/dev/null | ssh-keygen -lf - -E sha256 | awk '{print $2}')"
          [ "$EXPECT" = "$ACTUAL" ] || { echo "Fingerprint mismatch"; exit 1; }

      # 8. EC2에 접속하여 새 Docker 이미지로 배포 (안정성 강화 버전)
      - name: Deploy to EC2 with Docker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          fingerprint: ${{ secrets.EC2_HOST_FINGERPRINT }}
          # debug: true
          script: |
            # 셸 스크립트 오류 발생 시 즉시 중단
            set -Eeuo pipefail

            # 1) AWS CLI 확인 (없으면 설치 시도)
            if ! command -v aws >/dev/null 2>&1; then
              echo "awscli not found. Installing..."
              sudo yum -y install awscli || (sudo apt-get update && sudo apt-get -y install awscli)
            fi
            
            # Docker 엔진 확인(미설치 시 실패)
            if ! command -v docker >/dev/null 2>&1; then
              echo "docker not found. Please install Docker on the EC2 host."; exit 1
            fi

            # 2) ECR 로그인
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # 3) 최신 이미지 Pull
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}

            # 4) 기존 컨테이너 중지/삭제 (없어도 무시)
            docker stop moodflix-container || true
            docker rm moodflix-container || true

            # 5) 새 컨테이너 실행 (자동 재시작 정책 추가)
            docker run -d --restart unless-stopped -p 8080:8080 --name moodflix-container \
              -e "DB_URL=${{ secrets.DB_URL }}" \
              -e "DB_USERNAME=${{ secrets.DB_USERNAME }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
              -e "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
              -e "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" \
              -e "TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}" \
              ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}

            # 6) Health check (최대 1분 대기)
            echo "Waiting for application to start..."
            for i in {1..30}; do
              if curl -fsS http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
                echo "Health check successful!";
                exit 0;
              fi;
              sleep 2;
            done
            
            echo "Health check failed after 60 seconds."
            docker logs --tail 100 moodflix-container
            exit 1
